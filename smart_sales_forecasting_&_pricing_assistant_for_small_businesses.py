# -*- coding: utf-8 -*-
"""Smart Sales Forecasting & Pricing Assistant for Small Businesses

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dmakg-Z2fw2XtXtHhNTHcaqpsJsL8LvI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from datetime import datetime, timedelta

# Generate fake sales data for 3 products
np.random.seed(42)
dates = pd.date_range(start='2024-01-01', periods=100)

data = []
products = ['Product A', 'Product B', 'Product C']

for date in dates:
    for product in products:
        quantity = np.random.randint(1, 20)
        price = np.random.uniform(10, 50)
        revenue = quantity * price
        data.append([date, product, quantity, round(revenue, 2)])

df = pd.DataFrame(data, columns=['date', 'product', 'quantity', 'revenue'])
df.head()

# Convert 'date' column to datetime just in case
df['date'] = pd.to_datetime(df['date'])

# Check for missing values
print("Missing values:\n", df.isnull().sum())

# Fill or drop missing values
df.fillna(method='ffill', inplace=True)  # forward fill

# Sort data
df = df.sort_values(by='date')

# Group daily revenue per product
daily_revenue = df.groupby(['date', 'product'])['revenue'].sum().reset_index()

# Pivot table: date as index, products as columns
pivot_df = daily_revenue.pivot(index='date', columns='product', values='revenue')

# 7-day moving average
moving_avg = pivot_df.rolling(window=7).mean()

growth_rate = pivot_df.pct_change().fillna(0) * 100  # In percentage
growth_rate = growth_rate.round(2)
growth_rate.head()

top_products = df.groupby('product')['revenue'].sum().sort_values(ascending=False)
print("Top Products by Total Revenue:\n", top_products)

# Line plot of revenue with 7-day moving avg
plt.figure(figsize=(12,6))
for product in pivot_df.columns:
    plt.plot(pivot_df.index, pivot_df[product], label=f'{product} Revenue')
    plt.plot(moving_avg.index, moving_avg[product], linestyle='--', label=f'{product} 7-day Avg')

plt.title("Daily Revenue & 7-Day Moving Average")
plt.xlabel("Date")
plt.ylabel("Revenue")
plt.legend()
plt.tight_layout()
plt.show()

# Total Revenue per Week
weekly_revenue = df.groupby(pd.Grouper(key='date', freq='W'))['revenue'].sum().reset_index()

#Average Order Value (AOV)
df['AOV'] = df['revenue'] / df['quantity']
aov_by_product = df.groupby('product')['AOV'].mean()

#Units Sold per Product (Total Quantity)
units_sold = df.groupby('product')['quantity'].sum().sort_values(ascending=False)

#Revenue Share per Product (%)
product_revenue_share = (df.groupby('product')['revenue'].sum() / df['revenue'].sum()) * 100
product_revenue_share = product_revenue_share.round(2)

#Day of Week Analysis
df['day_of_week'] = df['date'].dt.day_name()
dow_stats = df.groupby('day_of_week')['revenue'].mean().sort_values(ascending=False)

#sorting day-of-week output logically
weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
dow_stats = dow_stats.reindex(weekday_order)

print("üìä Weekly Revenue:\n", weekly_revenue.tail())
print("\nüí∞ AOV by Product:\n", aov_by_product)
print("\nüì¶ Units Sold per Product:\n", units_sold)
print("\nüìà Revenue Share (%):\n", product_revenue_share)
print("\nüìÖ Average Revenue by Day of Week:\n", dow_stats)

plt.figure(figsize=(8,4))
sns.barplot(x=dow_stats.index, y=dow_stats.values)
plt.title("Average Revenue by Day of Week")
plt.ylabel("Revenue")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

product_revenue_share.plot.pie(autopct='%1.1f%%', figsize=(6,6), title="Revenue Share by Product")
plt.ylabel("")
plt.show()

"""# Sales Forecasting Model"""

!pip install prophet --quiet
from prophet import Prophet

# Aggregate daily revenue
daily_total_revenue = df.groupby('date')['revenue'].sum().reset_index()

# Rename columns for Prophet
daily_total_revenue = daily_total_revenue.rename(columns={'date': 'ds', 'revenue': 'y'})
daily_total_revenue.head()

# Initialize and fit model
model = Prophet()
model.fit(daily_total_revenue)

# Create future dataframe (next 30 days)
future = model.make_future_dataframe(periods=30)

# Forecast
forecast = model.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

# Forecast plot
fig1 = model.plot(forecast)
plt.title("üìà Forecasted Total Revenue (Next 30 Days)")
plt.xlabel("Date")
plt.ylabel("Revenue")
plt.show()

# Optional: Seasonality trends
fig2 = model.plot_components(forecast)
plt.show()

# Split data
train = daily_total_revenue[:-30]  # all except last 30 days
test = daily_total_revenue[-30:]   # last 30 days

from prophet import Prophet

model = Prophet()
model.fit(train)

future_test = model.make_future_dataframe(periods=30)
forecast_test = model.predict(future_test)

# Extract last 30 forecasted values to compare
prophet_preds = forecast_test[['ds', 'yhat']].tail(30)

from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error
import numpy as np

# Actual and predicted values
y_true = test['y'].values
y_pred = prophet_preds['yhat'].values

# Metrics
mae = mean_absolute_error(y_true, y_pred)
mse = mean_squared_error(y_true, y_pred)
rmse = np.sqrt(mse)
mape = mean_absolute_percentage_error(y_true, y_pred) * 100

print(f"üìè MAE: {mae:.2f}")
print(f"üìâ RMSE: {rmse:.2f}")
print(f"üìà MAPE: {mape:.2f}%")

model = Prophet(changepoint_prior_scale=0.5)  # or the value you chose
model.fit(train)

future_test = model.make_future_dataframe(periods=30)
forecast_test = model.predict(future_test)

# Take last 30 days of forecast
prophet_preds = forecast_test[['ds', 'yhat']].tail(30)

from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error
import numpy as np

# True and predicted values
y_true = test['y'].values
y_pred = prophet_preds['yhat'].values

# Evaluation
mae = mean_absolute_error(y_true, y_pred)
rmse = np.sqrt(mean_squared_error(y_true, y_pred))
mape = mean_absolute_percentage_error(y_true, y_pred) * 100

print(f"üìè MAE: {mae:.2f}")
print(f"üìâ RMSE: {rmse:.2f}")
print(f"üìà MAPE: {mape:.2f}%")

from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error
import numpy as np

# True and predicted values
y_true = test['y'].values
y_pred = prophet_preds['yhat'].values

# Evaluation
mae = mean_absolute_error(y_true, y_pred)
rmse = np.sqrt(mean_squared_error(y_true, y_pred))
mape = mean_absolute_percentage_error(y_true, y_pred) * 100

print(f"üìè MAE: {mae:.2f}")
print(f"üìâ RMSE: {rmse:.2f}")
print(f"üìà MAPE: {mape:.2f}%")

"""# GenAI-powered insights + conversation"""

from transformers import pipeline

# Load summarization pipeline
summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

# Use last 2 weekly revenue values
last_week = weekly_revenue['revenue'].iloc[-2]
this_week = weekly_revenue['revenue'].iloc[-1]
growth = ((this_week - last_week) / last_week) * 100

top_product = top_products.idxmax()
worst_day = dow_stats.idxmin()
best_days = dow_stats.sort_values(ascending=False).head(2).index.tolist()

avg_aov = df['AOV'].mean()

# Build summary string
summary_input = f"""
Last week's revenue: ${last_week:.2f}
This week's revenue: ${this_week:.2f}
Growth rate: {growth:.2f}%
Top-selling product: {top_product}
Best sales days: {', '.join(best_days)}
Lowest sales day: {worst_day}
Average order value: ${avg_aov:.2f}
"""

print("üîç Business Summary Input to GenAI:\n", summary_input)

# Summarize into business advice
result = summarizer(summary_input, max_length=60, min_length=25, do_sample=False)
suggestion = result[0]['summary_text']

print("üí° GenAI Suggestion:\n", suggestion)

import requests

def ask_together_ai(prompt, api_key):
    url = "https://api.together.xyz/v1/chat/completions"

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    body = {
        "model": "mistralai/Mistral-7B-Instruct-v0.2",  # Good general-purpose model
        "messages": [
            {"role": "system", "content": "You are an AI business advisor helping small shop owners understand and act on their sales performance."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 256
    }

    response = requests.post(url, headers=headers, json=body)

    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content']
    else:
        print("‚ùå Error:", response.text)
        return "‚ö†Ô∏è Failed to get a response from Together.ai"

# Put your Together API key here
api_key = "743d155d3e372a652aa8bbfa93700bf4309f89b2687caa79bb36ebf4e861d474"

# Example user question
user_question = "Why are sales lower this week compared to last week, and what should I do?"

# Reuse your GenAI summary from earlier
prompt = f"""
Business Summary:
{summary_input}

Question:
{user_question}
"""

# Get response
ai_response = ask_together_ai(prompt, api_key)

print("ü§ñ AI Advisor Response:\n")
print(ai_response)

